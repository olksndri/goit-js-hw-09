{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAIA,MAAMC,EAAQC,SAASC,cAAc,uBAC/BC,EAAOF,SAASC,cAAc,sBAC9BE,EAASH,SAASC,cAAc,wBAChCG,EAAOJ,SAASC,cAAc,SAEpC,IAAII,EACAC,EACAC,EAmCJ,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAUtC,OATc,IAAIC,SAAQ,CAACC,EAASC,KAClCC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,EAAUS,MAAAR,IAEpBM,EAAO,C,SAAEP,EAAUS,MAAAR,GAAQ,GAE5BA,EAAM,G,CA1CbX,EAAMoB,iBAAiB,SAAS,KAC9Bd,EAAee,OAAOrB,EAAMsB,MAAM,IAGpCnB,EAAKiB,iBAAiB,SAAS,KAC7Bb,EAAcc,OAAOlB,EAAKmB,MAAM,IAGlClB,EAAOgB,iBAAiB,SAAS,KAC/BZ,EAAgBa,OAAOjB,EAAOkB,MAAM,IAGtCjB,EAAKe,iBAAiB,UAAUG,IAC9BA,EAAMC,iBACN,IAAK,IAAIC,EAAI,EAAGA,GAAKjB,EAAeiB,IACxB,IAANA,IACFnB,GAAgBC,GAElBE,EAAcgB,EAAGnB,GACdoB,MAAK,EAAChB,SAAEA,EAAUS,MAAAQ,MACjBC,EAAA9B,GAAS+B,OAAOC,QACd,uBAAqBpB,QAAiBiB,MAAU,IAGnDI,OAAM,EAACrB,SAAEA,EAAUS,MAAAa,MAClBJ,EAAA9B,GAAS+B,OAAOI,QACd,sBAAoBvB,QAAesB,MAAU,IAIrD1B,EAAee,OAAOrB,EAAMsB,MAAM","sources":["src/js/03-promises.js"],"sourcesContent":["'use strict';\n\nimport Notiflix from 'notiflix';\n\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst form = document.querySelector('.form');\n\nlet currentDelay;\nlet currentStep;\nlet currentAmount;\n\ndelay.addEventListener('input', () => {\n  currentDelay = Number(delay.value);\n});\n\nstep.addEventListener('input', () => {\n  currentStep = Number(step.value);\n});\n\namount.addEventListener('input', () => {\n  currentAmount = Number(amount.value);\n});\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  for (let i = 1; i <= currentAmount; i++) {\n    if (i !== 1) {\n      currentDelay += currentStep;\n    }\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  currentDelay = Number(delay.value);\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  let promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$delay","document","querySelector","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$form","$47d4ff9957288465$var$currentDelay","$47d4ff9957288465$var$currentStep","$47d4ff9957288465$var$currentAmount","$47d4ff9957288465$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","addEventListener","Number","value","event","preventDefault","i","then","delay1","$parcel$interopDefault","Notify","success","catch","delay2","failure"],"version":3,"file":"03-promises.94b80bb8.js.map"}